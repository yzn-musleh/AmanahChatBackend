// <auto-generated />
using System;
using Infrastructure.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250525104104_initial-chat-DB")]
    partial class initialchatDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.ChatMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid?>("ActionBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastActionDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoomMemberId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoomMemberId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("Domain.Entities.ChatMessageReply", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid?>("ActionBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChatMessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastActionDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoomMemberId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ChatMessageId");

                    b.HasIndex("RoomMemberId");

                    b.ToTable("ChatMessageReplies");
                });

            modelBuilder.Entity("Domain.Entities.ChatRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid?>("ActionBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastActionDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ChatRooms");
                });

            modelBuilder.Entity("Domain.Entities.RoomMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid?>("ActionBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChatRoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastActionDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ChatRoomId");

                    b.HasIndex("UserId");

                    b.ToTable("RoomMembers");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid?>("ActionBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConnectId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastActionDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Entities.ChatMessage", b =>
                {
                    b.HasOne("Domain.Entities.RoomMember", "RoomMember")
                        .WithMany()
                        .HasForeignKey("RoomMemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("Domain.Entities.ChatMessage.Metadata#List", "Metadata", b1 =>
                        {
                            b1.Property<Guid>("ChatMessageId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Capacity")
                                .HasColumnType("int");

                            b1.HasKey("ChatMessageId");

                            b1.ToTable("ChatMessages");

                            b1.ToJson("Metadata");

                            b1.WithOwner()
                                .HasForeignKey("ChatMessageId");
                        });

                    b.Navigation("Metadata");

                    b.Navigation("RoomMember");
                });

            modelBuilder.Entity("Domain.Entities.ChatMessageReply", b =>
                {
                    b.HasOne("Domain.Entities.ChatMessage", "ChatMessage")
                        .WithMany("ChatMessageReplies")
                        .HasForeignKey("ChatMessageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.RoomMember", "RoomMember")
                        .WithMany()
                        .HasForeignKey("RoomMemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>", "Metadata", b1 =>
                        {
                            b1.Property<Guid>("ChatMessageReplyId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Capacity")
                                .HasColumnType("int");

                            b1.HasKey("ChatMessageReplyId");

                            b1.ToTable("ChatMessageReplies");

                            b1.ToJson("Metadata");

                            b1.WithOwner()
                                .HasForeignKey("ChatMessageReplyId");
                        });

                    b.Navigation("ChatMessage");

                    b.Navigation("Metadata");

                    b.Navigation("RoomMember");
                });

            modelBuilder.Entity("Domain.Entities.ChatRoom", b =>
                {
                    b.OwnsOne("System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>", "Metadata", b1 =>
                        {
                            b1.Property<Guid>("ChatRoomId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Capacity")
                                .HasColumnType("int");

                            b1.HasKey("ChatRoomId");

                            b1.ToTable("ChatRooms");

                            b1.ToJson("Metadata");

                            b1.WithOwner()
                                .HasForeignKey("ChatRoomId");
                        });

                    b.Navigation("Metadata");
                });

            modelBuilder.Entity("Domain.Entities.RoomMember", b =>
                {
                    b.HasOne("Domain.Entities.ChatRoom", "ChatRoom")
                        .WithMany("RoomMembers")
                        .HasForeignKey("ChatRoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>", "Metadata", b1 =>
                        {
                            b1.Property<Guid>("RoomMemberId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Capacity")
                                .HasColumnType("int");

                            b1.HasKey("RoomMemberId");

                            b1.ToTable("RoomMembers");

                            b1.ToJson("Metadata");

                            b1.WithOwner()
                                .HasForeignKey("RoomMemberId");
                        });

                    b.Navigation("ChatRoom");

                    b.Navigation("Metadata");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.OwnsOne("System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, string>>", "Metadata", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Capacity")
                                .HasColumnType("int");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.ToJson("Metadata");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Metadata");
                });

            modelBuilder.Entity("Domain.Entities.ChatMessage", b =>
                {
                    b.Navigation("ChatMessageReplies");
                });

            modelBuilder.Entity("Domain.Entities.ChatRoom", b =>
                {
                    b.Navigation("RoomMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
